motion_animation:
  variables:
    timeout: "[[[ return Date.now() - Date.parse(entity.last_changed); ]]]"
  triggers_update: "all"
  show_icon: false
  custom_fields:
    icon: >
      [[[
      let path = `
        <path d="M10,0.2C9,0.2 8.2,1 8.2,2C8.2,3 9,3.8 10,3.8C11,3.8 11.8,3 11.8,2C11.8,1 11,0.2 10,0.2M15.67,1A7.33,7.33 0 0,0 23,8.33V7A6,6 0 0,1 17,1H15.67M18.33,1C18.33,3.58 20.42,5.67 23,5.67V4.33C21.16,4.33 19.67,2.84 19.67,1H18.33M21,1A2,2 0 0,0 23,3V1H21M7.92,4.03C7.75,4.03 7.58,4.06 7.42,4.11L2,5.8V11H3.8V7.33L5.91,6.67L2,22H3.8L6.67,13.89L9,17V22H10.8V15.59L8.31,11.05L9.04,8.18L10.12,10H15V8.2H11.38L9.38,4.87C9.08,4.37 8.54,4.03 7.92,4.03Z" />
      `,
        style = `
          <svg viewBox="0 0 24 24">
            <style>
              @keyframes clip {
                50% { clip-path: polygon(0 0, 55% 0, 100% 100%, 0 100%); }
              }
              .start {
                animation: clip 2s linear infinite;
              }
              .on {
                animation: clip 2s linear infinite;
              }
              .end {
                clip-path: polygon(0 0, 55% 0, 100% 100%, 0 100%);
              }
              .start_timeout {
                animation: clip 2s linear infinite;
              }
              .end_timeout {
                clip-path: polygon(0 0, 55% 0, 100% 100%, 0 100%);
              }
            </style>
        `;
        if (entity.state === 'on' && variables.timeout < -1000) {
          return `${style}<g class="start">${path}</g></svg>`;
        }
        if (entity.state === 'off' && variables.timeout < 1000) {
          return `${style}<g class="end">${path}</g></svg>`;
        }
        if (entity.state === 'on') {
          return `${style}<g class="start_timeout">${path}</g></svg>`;
        } else {
          return `${style}<g class="end_timeout">${path}</g></svg>`;
        }
      ]]]

    img_cell: "[[[  return `<svg viewBox='0 0 24 24'><ellipse stroke='none' fill='none'></ellipse></svg>`; ]]]"
